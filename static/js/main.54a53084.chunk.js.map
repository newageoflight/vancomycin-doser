{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["schema","yup","shape","age","positive","integer","required","weight","creatinine","App","useForm","resolver","yupResolver","register","handleSubmit","useState","result","setResult","className","style","borderBottom","marginTop","onSubmit","data","wt","cr","sex","ld","md_min","md_max","md_freq","crcl","vancDose","htmlFor","type","name","id","ref","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAcMA,EAASC,MAAaC,MAAM,CAChCC,IAAKF,MAAaG,WAAWC,UAAUC,WACvCC,OAAQN,MAAaG,WAAWE,WAChCE,WAAYP,MAAaG,WAAWE,aAuFvBG,MApFf,WAAgB,IAAD,EACsBC,YAAQ,CAAEC,SAAUC,sBAAYZ,KAA3Da,EADK,EACLA,SAAUC,EADL,EACKA,aADL,EAEeC,qBAFf,mBAENC,EAFM,KAEEC,EAFF,KAQb,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,iBAAiBC,MAAO,CAACC,aAAa,GAAD,OAAKJ,EAAS,iBAAmB,KAArF,UACE,oBAAIG,MAAO,CAACE,UAAW,GAAvB,wDACA,uBAAMC,SAAUR,GAVP,SAACS,GAA+B,IACzCpB,EAAyCoB,EAAzCpB,IAAaqB,EAA4BD,EAApChB,OAAwBkB,EAAYF,EAAxBf,WAAgBkB,EAAQH,EAARG,IACvCT,EAoDJ,SAAkBd,EAAaqB,EAAYC,EAAYC,GACrD,IACIC,EAAIC,EAAQC,EAAQC,EADlBC,GAAQ,IAAM5B,GAAOqB,GAAM,KAAMC,IAAgB,WAARC,EAAoB,IAAO,GAEtEK,EAAO,IACTH,EAAS,GAAGJ,EACZK,EAAS,GAAGL,EACZM,EAAU,IACDC,GAAQ,IAAMA,GAAQ,IAC/BH,EAASC,EAAS,GAAGL,EACrBM,EAAU,IACDC,GAAQ,IAAMA,EAAO,IAC9BH,EAASC,EAAS,GAAGL,EACrBM,EAAU,KAEVF,EAASC,EAAS,GAAGL,EACrBM,EAAU,IAIVH,EADEI,GAAQ,GACL,GAAGP,EAEH,GAAGA,EAGV,MAAO,CAACG,KAAIC,SAAQC,SAAQC,WA5EhBE,CAAS7B,EAAKqB,EAAIC,EAAIC,OAQ1B,UACE,sBAAKR,UAAU,YAAf,UACE,uBAAOe,QAAQ,MAAf,qCACA,uBAAOC,KAAK,SAASC,KAAK,MAAMC,GAAG,MAAMC,IAAKxB,OAEhD,sBAAKK,UAAU,YAAf,UACE,uBAAOe,QAAQ,SAAf,qCACA,uBAAOC,KAAK,OAAOC,KAAK,SAASC,GAAG,SAASC,IAAKxB,OAEpD,sBAAKK,UAAU,YAAf,UACE,uBAAOe,QAAQ,aAAf,kDACA,uBAAOC,KAAK,OAAOC,KAAK,aAAaC,GAAG,aAAaC,IAAKxB,OAE5D,sBAAKK,UAAU,YAAf,UACE,uBAAOe,QAAQ,MAAf,6BACA,yBAAQE,KAAK,MAAMC,GAAG,MAAMC,IAAKxB,EAAjC,UACE,wBAAQyB,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,0BAGJ,uBAAOJ,KAAK,SAASI,MAAM,yBAG/B,qBAAKpB,UAAS,2BAAsBF,EAAS,SAAW,IAAxD,SACGA,EACC,qCACE,8BAAG,mDAAH,IAAmCA,EAAOW,GAA1C,SACA,8BAAG,sDAAH,KAAuCX,EAAOY,SAAWZ,EAAOa,OAC9D,qCACGb,EAAOa,OADV,SAIA,qCACGb,EAAOY,OADV,IACmBZ,EAAOa,OAD1B,SALF,KAQKb,EAAOc,QARZ,UAUA,WCxDCS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.54a53084.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\nimport './App.css';\n\ninterface DosingParameters {\n  ld: number;\n  md_min: number;\n  md_max: number;\n  md_freq: number;\n}\n\nconst schema = yup.object().shape({\n  age: yup.number().positive().integer().required(),\n  weight: yup.number().positive().required(),\n  creatinine: yup.number().positive().required()\n})\n\nfunction App() {\n  const { register, handleSubmit } = useForm({ resolver: yupResolver(schema) })\n  const [result, setResult] = useState<DosingParameters>();\n  const onSubmit = (data: Record<string, any>) => {\n    let { age, weight: wt, creatinine: cr, sex } = data;\n    setResult(vancDose(age, wt, cr, sex));\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"form-container\" style={{borderBottom: `${result ? '1px solid grey' : ''}`}}>\n          <h2 style={{marginTop: 0}}>Vancomycin dose calculator (StV compliant)</h2>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <div className=\"input-row\">\n              <label htmlFor=\"age\">Patient's age (years): </label>\n              <input type=\"number\" name=\"age\" id=\"age\" ref={register}/>\n            </div>\n            <div className=\"input-row\">\n              <label htmlFor=\"weight\">Patient's weight (kg): </label>\n              <input type=\"text\" name=\"weight\" id=\"weight\" ref={register}/>\n            </div>\n            <div className=\"input-row\">\n              <label htmlFor=\"creatinine\">Patient's last creatinine (umol/L): </label>\n              <input type=\"text\" name=\"creatinine\" id=\"creatinine\" ref={register}/>\n            </div>\n            <div className=\"input-row\">\n              <label htmlFor=\"sex\">Patient's sex: </label>\n              <select name=\"sex\" id=\"sex\" ref={register}>\n                <option value=\"male\">Male</option>\n                <option value=\"female\">Female</option>\n              </select>\n            </div>\n            <input type=\"submit\" value=\"Calculate dose\"/>\n          </form>\n        </div>\n        <div className={`result-container ${result ? \"filled\" : \"\"}`}>\n          {result ? (\n            <>\n              <p><strong>Loading dose:</strong> {result.ld} mg</p>\n              <p><strong>Maintenance dose</strong>: {result.md_min === result.md_max ? (\n                <>\n                  {result.md_max} mg\n                </>\n              ) : (\n                <>\n                  {result.md_min}-{result.md_max} mg\n                </>\n              )} q{result.md_freq}h</p>\n            </>\n          ) : \"\"}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction vancDose(age: number, wt: number, cr: number, sex: \"male\" | \"female\") {\n  const crcl = (140 - age) * wt / (0.815*cr) * ((sex === \"female\") ? 0.85 : 1)\n  let ld, md_min, md_max, md_freq;\n  if (crcl > 60) {\n    md_min = 15*wt;\n    md_max = 20*wt;\n    md_freq = 12;\n  } else if (crcl >= 40 && crcl <= 60) {\n    md_min = md_max = 15*wt;\n    md_freq = 12;\n  } else if (crcl >= 20 && crcl < 40) {\n    md_min = md_max = 15*wt;\n    md_freq = 24;\n  } else {\n    md_min = md_max = 15*wt;\n    md_freq = 48;\n  }\n\n  if (crcl >= 20) {\n    ld = 25*wt;\n  } else {\n    ld = 15*wt;\n  }\n\n  return {ld, md_min, md_max, md_freq}\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}